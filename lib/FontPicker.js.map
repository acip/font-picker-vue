{"version":3,"file":"FontPicker.js","sources":["../src/FallbackFontManager.js","../src/FontPicker.vue"],"sourcesContent":["export default class FallbackFontManager {\n\tconstructor() {\n\t\tthis.fonts = [\n\t\t\t{ family: 'Arial' },\n\t\t\t{ family: 'Comic Sans MS' },\n\t\t\t{ family: 'Courier New' },\n\t\t\t{ family: 'Geneva' },\n\t\t\t{ family: 'Georgia' },\n\t\t\t{ family: 'Helvetica' },\n\t\t\t{ family: 'Impact' },\n\t\t\t{ family: 'Lucida Console' },\n\t\t\t{ family: 'Tahoma' },\n\t\t\t{ family: 'Times New Roman' },\n\t\t\t{ family: 'Verdana' }\n\t\t];\n\t}\n\n\tsetActiveFont(fontFamily) {\n\t\tconst listIndex = this.fonts.findIndex(f => f.family === fontFamily);\n\t\tif (listIndex === -1) {\n\t\t\t// Font is not part of font list: Keep current activeFont and log error\n\t\t\tconsole.error(`Cannot update activeFont: The font \"${fontFamily}\" is not in the font list`);\n\t\t\treturn -1;\n\t\t}\n\t\t// Font is part of font list: Update activeFont and set previous one as fallback\n\t\t// var previousFont = this.activeFont.family;\n\t\tthis.activeFont = this.fonts[listIndex];\n\t\treturn listIndex;\n\t}\n\n\tdownloadPreviews() {\n\t\t// intentionally empty to confirm with FontManager from font-picker\n\t\treturn this;\n\t}\n}\n","<template>\n\t<div :id=\"`font-picker${pickerSuffix}`\" class=\"font-picker\" :title=\"state.errorText\">\n\t\t<button class=\"dropdown-button\" type=\"button\"\n\t\t\t\t:class=\"{expanded: state.expanded}\"\n\t\t\t\t@click=\"toggleExpanded\"\n\t\t\t\t@keyup=\"updateFilter\">\n\t\t\t<p class=\"dropdown-font-name\" :style=\"{'font-family' : state.activeFont}\">{{state.activeFont}}</p>\n\t\t\t<p class=\"dropdown-icon\" :class=\"state.loadingStatus\"></p>\n\t\t</button>\n\t\t<ul v-if=\"state.loadingStatus === 'finished' && fontManager.fonts\"\n\t\t\t:class=\"{expanded: state.expanded}\"\n\t\t\t@scroll=\"onScroll\">\n\t\t\t<li v-for=\"font in fonts\" :key=\"font.family\">\n\t\t\t\t<button type=\"button\" class=\"font-abeezece\"\n\t\t\t\t\t\t:class=\"`font-${snakeCase(font.family)}${pickerSuffix} ${font.family === state.activeFont ? 'active-font' : ''}`\"\n                        :style=\"{'font-family' : font.family}\"\n\t\t\t\t\t\t@click.prevent=\"itemClick(font)\"\n\t\t\t\t\t\t@keypress.prevent=\"itemClick(font)\">{{font.family}}</button>\n\t\t\t</li>\n\t\t</ul>\n\t</div>\n</template>\n\n<script>\n    import { FontManager } from 'font-picker';\n    import FallbackFontManager from './FallbackFontManager';\n\n    /**\n     * Vue interface for the font picker\n     * @prop {string} apiKey (required) - Google API key\n     * @prop {string} activeFont - Font that should be selected in the font picker and applied to the\n     * text (default: 'Open Sans'). Must be stored in component state, and be updated using an onChange\n     * listener. See README.md for an example.\n     * @prop {Object} options - Object with additional (optional) parameters:\n     *   @prop {string} name - If you have multiple font pickers on your site, you need to give them\n     *   unique names (which may only consist of letters and digits). These names must also be appended\n     *   to the font picker's ID and the .apply-font class name.\n     *   Example: If { name: 'main' }, use #font-picker-main and .apply-font-main\n     *   @prop {string[]} families - If only specific fonts shall appear in the list, specify their\n     *   names in an array\n     *   @prop {string[]} categories - Array of font categories\n     *   Possible values: 'sans-serif', 'serif', 'display', 'handwriting', 'monospace' (default: all\n     *   categories)\n     *   @prop {string[]} variants - Array of variants which the fonts must include and which will be\n     *   downloaded; the first variant in the array will become the default variant (and will be used\n     *   in the font picker and the .apply-font class)\n     *   Example: ['regular', 'italic', '700', '700italic'] (default: ['regular'])\n     *   @prop {number} limit - Maximum number of fonts to be displayed in the list (the least popular\n     *   fonts will be omitted; default: 100)\n     *   @prop {string} sort - Sorting attribute for the font list\n     *   Possible values: 'alphabetical' (default), 'popularity'\n     * @prop {function} onChange - Function which is executed whenever the user changes the active font\n     * and its stylesheet finishes downloading\n     */\n    export default {\n        props: ['activeFont', 'apiKey', 'options'],\n\n        data() {\n            return {\n                state: {\n                    activeFont: this.activeFont,\n                    errorText: '',\n                    expanded: false,\n                    filter: '',\n                    loadingStatus: 'loading' // possible values: 'loading', 'finished', 'error'\n                },\n                pickerSuffix: '',\n                fontManager: null,\n            };\n        },\n\n        computed: {\n            fonts: function fontFiltered() {\n                return this.fontManager.fonts.filter(font => font.family.toLowerCase().startsWith(this.state.filter));\n            }\n        },\n\n        mounted() {\n            // Determine selector suffix from font picker's name\n            if (this.options && this.options.name) {\n                this.pickerSuffix = `-${this.options.name}`;\n            } else {\n                this.pickerSuffix = '';\n            }\n\n            // Initialize FontManager object and generate the font list\n            this.fontManager = new FontManager(\n                this.apiKey,\n                this.activeFont,\n                this.options\n            );\n\n            this.fontManager.init()\n                .finally(() => {\n                    // font list has finished loading\n                    this.setState({\n                        errorText: '',\n                        loadingStatus: 'finished'\n                    });\n                })\n                .catch((err) => {\n                    this.fontManager = new FallbackFontManager();\n                    // select first fallback font as default one\n                    this.$emit('change', this.fontManager.fonts[0]);\n                    console.error(this.state.errorText);\n                    console.error(err);\n                });\n        },\n\n        watch: {\n            activeFont() {\n                if (this.state.activeFont !== this.activeFont) {\n                    this.setActiveFont(this.activeFont);\n                }\n            },\n        },\n\n        methods: {\n            /**\n             * Set state object\n             */\n            setState(state) {\n                this.state = Object.assign(this.state, state);\n            },\n\n            /**\n             * EventListener for closing the font picker when clicking anywhere outside it\n             */\n            onClose(e) {\n                let targetElement = e.target; // clicked element\n\n                do {\n                    if (targetElement === document.getElementById('font-picker')) {\n                        // click inside font picker\n                        return;\n                    }\n                    // move up the DOM\n                    targetElement = targetElement.parentNode;\n                } while (targetElement);\n\n                // click outside font picker\n                this.toggleExpanded();\n            },\n\n            /**\n             * Download the font previews for all visible font entries and the five after them\n             */\n            onScroll(e) {\n                const elementHeight = e.target.scrollHeight / this.fontManager.fonts.length;\n                const downloadIndex = Math.ceil((e.target.scrollTop + e.target.clientHeight) / elementHeight);\n                this.fontManager.downloadPreviews(downloadIndex + 5);\n            },\n\n            /**\n             * Set the font with the given font list index as the active one\n             */\n            setActiveFont(fontFamily) {\n                const activeFontIndex = this.fontManager.setActiveFont(fontFamily);\n                if (activeFontIndex === -1) {\n                    // error trying to change font\n                    this.setState({\n                        activeFont: fontFamily,\n                        errorText: `Cannot update activeFont: The font \"${fontFamily}\" is not in the font list`,\n                        loadingStatus: 'error'\n                    });\n                    console.error(this.state.errorText);\n                } else {\n                    // font change successful\n                    this.setState({\n                        activeFont: fontFamily,\n                        errorText: '',\n                        loadingStatus: 'finished'\n                    });\n                }\n            },\n\n            /**\n             * Expand/collapse the picker's font list\n             */\n            toggleExpanded() {\n                const updateState = {\n                    expanded: !this.state.expanded,\n                };\n\n                if (!this.state.expanded) {\n                    updateState.filter = '';\n                }\n\n                this.setState(updateState);\n            },\n\n            /**\n             * set search string\n             */\n            updateFilter($event) {\n                if ($event.key === 'Escape') {\n                    this.toggleExpanded();\n                    return;\n                }\n\n                if ($event.key === 'Backspace') {\n                    this.setState({\n                        // remove the last char from filter\n                        filter: this.state.filter.substr(0, this.state.filter.length - 1)\n                    });\n                    return;\n                }\n\n                // select the first font\n                if ($event.key === 'Enter') {\n                    const font = this.fonts[0];\n                    if (font) {\n                        this.itemClick(font);\n                    }\n                    return;\n                }\n\n                const pressedChar = String.fromCharCode($event.keyCode);\n                // is valid char\n                if (!pressedChar || /[^a-zA-Z]/.test(pressedChar)) {\n                    return;\n                }\n\n                // add pressed key to filteer\n                this.setState({\n                    filter: this.state.filter + pressedChar.toLowerCase()\n                });\n            },\n\n\t\t\tsnakeCase(text) {\n                return text.replace(/\\s+/g, '-').toLowerCase();\n\t\t\t},\n\n            itemClick(font) {\n                this.toggleExpanded();\n                this.$emit('change', font);\n\n            }\n        },\n    }\n</script>\n\n<style lang=\"scss\">\n\t.font-picker {\n\t\tposition: relative;\n\t\tdisplay: inline-block;\n\t\tbox-shadow: inset 0px -2px 2px rgba(0, 0, 0, 0.08);\n        border: 1px solid #BDC1CB;\n        background: #fff;\n        height: 20px;\n        border-radius: 2px;\n\n\t\t* {\n\t\t\tbox-sizing: border-box;\n\t\t}\n\n\t\tp {\n\t\t\tmargin: 0;\n\t\t\tpadding: 0;\n\t\t}\n\n\t\tbutton {\n\t\t\tbackground: none;\n\t\t\tborder: 0;\n\t\t\tcolor: inherit;\n\t\t\tcursor: pointer;\n\t\t\tfont-size: inherit;\n\t\t\toutline: none;\n\t\t}\n\n\t\t.dropdown-button {\n\t\t\twidth: 100%;\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tjustify-content: space-between;\n\t\t\tbackground: transparent;\n            line-height: 1;\n\n\t\t\t&:hover, &.expanded, &:focus {\n\t\t\t\tbackground: #bebebe;\n\t\t\t}\n\n\t\t\t.dropdown-font-name {\n\t\t\t\toverflow: hidden;\n\t\t\t\twhite-space: nowrap;\n\t\t\t}\n\n\t\t\t&.expanded .dropdown-icon.finished:before {\n\t\t\t\t-webkit-transform: rotate(-180deg);\n\t\t\t\ttransform: rotate(-180deg);\n\t\t\t}\n\t\t}\n\n\t\t.dropdown-icon {\n\n\t\t\t&.loading:before {\n\t\t\t\tcontent: '';\n\t\t\t\tdisplay: block;\n\t\t\t\theight: 10px;\n\t\t\t\twidth: 10px;\n\t\t\t\tborder-radius: 50%;\n\t\t\t\tborder: 2px solid #b2b2b2;\n\t\t\t\tborder-top-color: black;\n\t\t\t\t-webkit-animation: spinner 0.6s linear infinite;\n\t\t\t\tanimation: spinner 0.6s linear infinite;\n\t\t\t}\n\n\t\t\t&.finished:before {\n\t\t\t\tcontent: '';\n\t\t\t\tdisplay: block;\n\t\t\t\theight: 0;\n\t\t\t\twidth: 0;\n\t\t\t\tborder-left: 5px solid transparent;\n\t\t\t\tborder-right: 5px solid transparent;\n\t\t\t\tborder-top: 6px solid black;\n\t\t\t\ttransition: -webkit-transform 0.3s;\n\t\t\t\ttransition: transform 0.3s, -webkit-transform 0.3s;\n\t\t\t\tmargin: 0 2px;\n\t\t\t}\n\n\t\t\t&.error:before {\n\t\t\t\tcontent: '⚠';\n\t\t\t}\n\t\t}\n\n\t\tul {\n\t\t\tposition: absolute;\n\t\t\tz-index: 1;\n\t\t\tmax-height: 0;\n\t\t\twidth: 210px;\n\t\t\toverflow-x: hidden;\n\t\t\toverflow-y: auto;\n\t\t\t-webkit-overflow-scrolling: touch;\n\t\t\tmargin: 0;\n\t\t\tpadding: 0;\n\t\t\tbackground: #EAEAEA;\n\t\t\tbox-shadow: 1px 1px 3px rgba(0, 0, 0, 0.2);\n\t\t\ttransition: 0.3s;\n\n\t\t\t&.expanded {\n\t\t\t\tmax-height: 200px;\n\t\t\t}\n\n\t\t\tli {\n\t\t\t\theight: 35px;\n\t\t\t\tlist-style: none;\n\n\t\t\t\tbutton {\n\t\t\t\t\theight: 100%;\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\talign-items: center;\n\t\t\t\t\tpadding: 0 10px;\n\t\t\t\t\twhite-space: nowrap;\n\n\t\t\t\t\t&:hover, &:focus {\n\t\t\t\t\t\tbackground: #dddddd;\n\t\t\t\t\t}\n\n\t\t\t\t\t&.active-font {\n\t\t\t\t\t\tbackground: #d1d1d1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t@-webkit-keyframes spinner {\n\t\tto {\n\t\t\t-webkit-transform: rotate(360deg);\n\t\t\ttransform: rotate(360deg);\n\t\t}\n\t}\n\n\t@keyframes spinner {\n\t\tto {\n\t\t\t-webkit-transform: rotate(360deg);\n\t\t\ttransform: rotate(360deg);\n\t\t}\n\t}\n\n</style>\n"],"names":[],"mappings":";;;;AAAe,MAAM,mBAAmB,CAAC;CACxC,WAAW,GAAG;EACb,IAAI,CAAC,KAAK,GAAG;GACZ,EAAE,MAAM,EAAE,OAAO,EAAE;GACnB,EAAE,MAAM,EAAE,eAAe,EAAE;GAC3B,EAAE,MAAM,EAAE,aAAa,EAAE;GACzB,EAAE,MAAM,EAAE,QAAQ,EAAE;GACpB,EAAE,MAAM,EAAE,SAAS,EAAE;GACrB,EAAE,MAAM,EAAE,WAAW,EAAE;GACvB,EAAE,MAAM,EAAE,QAAQ,EAAE;GACpB,EAAE,MAAM,EAAE,gBAAgB,EAAE;GAC5B,EAAE,MAAM,EAAE,QAAQ,EAAE;GACpB,EAAE,MAAM,EAAE,iBAAiB,EAAE;GAC7B,EAAE,MAAM,EAAE,SAAS,EAAE;GACrB,CAAC;EACF;;CAED,aAAa,CAAC,UAAU,EAAE;EACzB,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,UAAU,CAAC,CAAC;EACrE,IAAI,SAAS,KAAK,CAAC,CAAC,EAAE;;GAErB,OAAO,CAAC,KAAK,CAAC,CAAC,oCAAoC,EAAE,UAAU,CAAC,yBAAyB,CAAC,CAAC,CAAC;GAC5F,OAAO,CAAC,CAAC,CAAC;GACV;;;EAGD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;EACxC,OAAO,SAAS,CAAC;EACjB;;CAED,gBAAgB,GAAG;;EAElB,OAAO,IAAI,CAAC;EACZ;CACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BD,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}